// 📡 رابط الـ API الخاص بالخادم لاستقبال بيانات التفاعل
const API_URL = "https://localhost:7089/api/captcha"; // غيّره حسب الحاجة

// 🧩 دالة ترجع كائن يحتوي على كود الخطأ وسببه بناءً على نوع الخطأ
function getErrorInfo(type) {
  const errors = {
    "fake-box": {
      errorCode: 1001, // 🔴 تم النقر على مربع مزيف
      reason: "Clicked on fake box"
    },
    "too-fast": {
      errorCode: 1002, // ⏱️ تم النقر بسرعة كبيرة جدًا
      reason: "Click was too fast"
    },
    "center-click": {
      errorCode: 1003, // 🎯 النقر كان مثالي جدًا (في المركز)
      reason: "Click was too perfect (center)"
    },
    "no-movement": {
      errorCode: 1004, // 🛑 لم يتم تحريك الماوس أبدًا
      reason: "No mouse movement detected"
    },
    "unknown": {
      errorCode: 3000, // ❓ حالة غير معروفة
      reason: "Unknown or untracked attempt"
    }
  };

  // ✅ إرجاع الخطأ المناسب، أو "unknown" إذا لم يُعرف النوع
  return errors[type] || errors["unknown"];
}

// 🚀 الدالة الرئيسية لإرسال البيانات إلى الخادم
export async function sendToBackend(data, clickedFakeBox = false, errorType = null) {
  // 🕒 توثيق وقت الإرسال
  const timestamp = new Date().toISOString();

  // 🧱 الحقول المشتركة التي تُضاف لأي نوع من أنواع البيانات
  const basePayload = {
    timestamp,
    ...(data.boxIndex !== undefined && { boxIndex: data.boxIndex }) // ✅ نضيف boxIndex فقط إذا كان موجود
  };

  let payload; // ✉️ الحمولة النهائية التي سترسل للخادم

  // 🤖 إذا تم اكتشاف أن المستخدم روبوت مباشرةً، نرسل الداتا كما هي + وقتها
  if (data.mode === "robot-detected") {
    payload = { ...data, ...basePayload };

  // ❌ إذا كان النقر على مربع مزيف، نرسل معلومات الخطأ والسبب ونحدد السلوك على أنه روبوت
  } else if (clickedFakeBox) {
    const { errorCode, reason } = getErrorInfo(errorType);
    payload = {
      ...basePayload,
      clickedFakeBox: true,
      behaviorType: "robot",
      movementPattern: "clicked-fake-box",
      errorCode,
      reason
    };

  // ✅ إذا كانت محاولة عادية ناجحة، نرسلها كما هي مع الوقت
  } else {
    payload = { ...data, ...basePayload };
  }

  try {
    // 📤 إرسال الطلب إلى الخادم عبر POST
    const response = await fetch(API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(payload)
    });

    // ⚠️ التحقق من نجاح الطلب
    if (!response.ok) {
      console.warn("⚠️ Server error:", response.status);
      return { success: false };
    }

    // 🧾 محاولة قراءة الرد من الخادم
    const result = await response.json().catch(() => null);

    // ❌ فشل تحليل الرد (ربما ليس JSON صحيح)
    if (!result) {
      console.error("❌ Failed to parse server response!");
      return { success: false };
    }

    // 📡 طباعة الرد الناجح
    console.log("📡 Backend response:", result);
    return result;

  } catch (error) {
    // 🧨 خطأ في الاتصال أو إرسال الطلب
    console.error("❌ Error sending data to API:", error);
    return { success: false };
  }
}
